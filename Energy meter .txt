#include "EmonLib.h"
#include <ESP8266WiFi.h>
#include "Adafruit_MQTT.h"
#include "Adafruit_MQTT_Client.h"

#define ctsensor A0 // define our ctsensor at pin0 which is the ADC for the ESP8266 board (the only ADC pin available)
/************************* WiFi Access Point *********************************/

#define WLAN_SSID       "?" // enter your WiFi SSID
#define WLAN_PASS       "?" // this is your WiFi password

/************************* Adafruit.io Setup *********************************/

#define MQTT_SERVER      "your Pi IP_address" // change this to your Pi IP_address
#define MQTT_SERVERPORT  1883                   // use 8883 for SSL
#define MQTT_USERNAME    "" // empty
#define MQTT_KEY         "" // empty

/************ Global State (you don't need to change this!) ******************/

// Create an ESP8266 WiFiClient class to connect to the MQTT server.
WiFiClient client;
// or... use WiFiFlientSecure for SSL
//WiFiClientSecure client;

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details.
Adafruit_MQTT_Client mqtt(&client, MQTT_SERVER, MQTT_SERVERPORT, MQTT_USERNAME, MQTT_KEY);

/****************************** data stream publish/subscribe ***************************************/

Adafruit_MQTT_Publish ctsensor_stream = Adafruit_MQTT_Publish(&mqtt, MQTT_USERNAME "current value"); // change the topic


EnergyMonitor emon1;

/*************************** Sketch Code ************************************/

// Bug workaround for Arduino 1.6.6, it seems to need a function declaration
// for some reason (only affects ESP8266, likely an arduino-builder bug).
void MQTT_connect();

void setup() {
  Serial.begin(115200);
  delay(10);
    emon1.current(A0, 30);             // Current: input pin, calibration.

  // pinMode(ctsensor,INPUT); // ctsensor connected to A0 to obtain analog value to be streamed to Raspberry Pi (broker)
  Serial.println(F("Adafruit MQTT demo"));

  // Connect to WiFi access point.
  Serial.println(); Serial.println();
  Serial.print("Connecting to ");
  Serial.println(WLAN_SSID);

  WiFi.begin(WLAN_SSID, WLAN_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();

  Serial.println("WiFi connected");
  Serial.println("IP address: "); Serial.println(WiFi.localIP());
  
}

uint32_t x=0;

void loop() {
  // Ensure the connection to the MQTT server is alive (this will make the first
  // connection and automatically reconnect when disconnected).  See the MQTT_connect
  // function definition further below.
  
  MQTT_connect();
double Irms = emon1.calcIrms(1480);  // Calculate Irms only

Serial.print(Irms*220.0);           // Apparent power
  Serial.print(" ");
  Serial.println(Irms);             // Irms


unsigned long last_time =0;
unsigned long current_time =0;
float Wh =0 ; 

float P = Irms*220.0; 
last_time = current_time;
current_time = millis();    
Wh = Wh+  P *(( current_time -last_time) /3600000.0) ; 
 int i=0;
 float watt1;
 if(Serial.available() > 0 ){
   delay(100); //allows all serial sent to be received together
    while(Serial.available() && i<5) {
     watt[i++] = Serial.read();
    }
    watt[i++]='\0';
  }

 watt1 = atof(watt);
 dtostrf(Wh, 4, 2, watt);        



  bill_amount = watt1 * (38/100);      // 1unit = 1kwH

  Serial.print(F("\nSending Power val "));
  Serial.println(watt1);
  Serial.println(bill_amount);
  Serial.print("...");



  //int ctsensor_value = analogRead(ctsensor); // get analog read at pin 0 which is our ctsensor
  //erial.print("+ read: ");
  //Serial.println(ctsensor_value,DEC); // print reading in DECIMAL
  ctsensor_stream.publish(Irms); // publish to Raspberry Pi under topic "/esp/ctsensor"
    
delay(10000);
}

// Function to connect and reconnect as necessary to the MQTT server.
// Should be called in the loop function and it will take care if connecting.
void MQTT_connect() {
  int8_t ret;

  // Stop if already connected.
  if (mqtt.connected()) {
    return;
  }

  Serial.print("Connecting to MQTT... ");

  uint8_t retries = 3;
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
       Serial.println(mqtt.connectErrorString(ret));
       Serial.println("Retrying MQTT connection in 5 seconds...");
       mqtt.disconnect();
       delay(5000);  // wait 5 seconds
       retries--;
       if (retries == 0) {
         // basically die and wait for WDT to reset me
         while (1);
       }
  }
  Serial.println("MQTT Connected!");
}